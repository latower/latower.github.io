@article{LatEtAl22,
title = {Exact stochastic constraint optimisation with applications in network analysis},
journal = {Artificial Intelligence},
volume = {304},
pages = {103650},
year = {2022},
issn = {0004-3702},
doi = {https://doi.org/10.1016/j.artint.2021.103650},
url = {https://www.sciencedirect.com/science/article/pii/S0004370221002010},
author = {Anna L.D. Latour and Behrouz Babaki and Dani\"el Fokkinga and Marie Anastacio and Holger H. Hoos and Siegfried Nijssen},
keywords = {Constraint programming, Probabilistic inference, Stochastic constraints, Ordered binary decision diagrams, Monotonic probability distributions, Global constraints, Automated algorithm configuration, Probabilistic networks},
abstract = {We present an extensive study of methods for exactly solving stochastic constraint (optimisation) problems (SCPs) in network analysis. These problems are prevalent in science, governance and industry. The first method we study is generic and decomposes stochastic constraints into a multitude of smaller local constraints that are solved using a constraint programming (CP) or mixed-integer programming (MIP) solver. However, many SCPs are formulated on probability distributions with a monotonic property, meaning that adding a positive decision to a partial solution to the problem cannot cause a decrease in solution quality. The second method is specifically designed for solving global stochastic constraints on monotonic probability distributions (SCMDs) in CP. Both methods use knowledge compilation to obtain a decision diagram encoding of the relevant probability distributions, where we focus on ordered binary decision diagrams (OBDDs). We discuss theoretical advantages and disadvantages of these methods and evaluate them experimentally. We observed that global approaches to solving SCMDs outperform decomposition approaches from CP, and perform complementarily to MIP-based decomposition approaches, while scaling much more favourably with instance size. Both methods have many alternative design choices, as both knowledge compilation and constraint solvers are used in a single pipeline. To identify which configurations work best, we apply programming by optimisation. Specifically, we show how an automated algorithm configurator can be used to find optimised configurations of our pipeline. After configuration, our global SCMD solving pipeline outperforms its closest competitor (a MIP-based decomposition pipeline) on all test sets we considered by up to two orders of magnitude in terms of PAR10 scores.}
}
